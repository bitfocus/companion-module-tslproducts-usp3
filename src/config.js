const { Regex } = require('@companion-module/base');

module.exports = {
	getConfigFields() {
		return [
			{
				type: 'static-text',
				id: 'info1',
				width: 12,
				label: 'Information',
				value: 'This module will allow you to use a TSL Products / DNF Controls Universal Switch Panels with Companion.<hr />',
			},
			{
				type: 'static-text',
				id: 'info2',
				width: 12,
				label: 'Companion Satellite Surface Configuration',
				value: 'This module allows you to use your USP panel as a satellite surface in Companion.',
			},
			{
				type: 'checkbox',
				id: 'use_as_surface',
				label: 'Use as a Satellite Surface in Companion',
				width: 3,
				default: true
			},
			{
				type: 'textinput',
				id: 'port_companion',
				label: 'Port configured on Companion Satellite',
				width: 3,
				default: '16622',
				regex: Regex.PORT,
				isVisible: (configValues) => configValues.use_as_surface == true,
			},
			{
				type: 'static-text',
				id: 'info3',
				width: 12,
				label: '',
				value: '<hr />',
			},
			{
				type: 'dropdown',
				id: 'model',
				label: 'Model of USP Panel',
				width: 12,
				default: 'usp3',
				choices: [
					{ id: 'usp3', label: 'TSL Products USP3 Panels' },
					{ id: 'usp_legacy', label: 'DNF Controls Legacy USP-8 or USP-16 Panel' },
				]
			},
			{
				type: 'textinput',
				id: 'host_usp',
				label: 'IP Address of USP Panel',
				width: 3,
				default: '',
				regex: Regex.IP,
			},
			{
				type: 'dropdown',
				id: 'port_usp',
				label: 'Port as configured on Panel',
				width: 3,
				default: '50001',
				choices: [
					{ id: '50001', label: '50001' },
					{ id: '50002', label: '50002' },
					{ id: '50003', label: '50003' },
					{ id: '50004', label: '50004' },
					{ id: '50005', label: '50005' },
					{ id: '50006', label: '50006' },
					{ id: '50007', label: '50007' },
					{ id: '50008', label: '50008' },
				],
				isVisible: (configValues) => configValues.model == 'usp3',
			},
			{
				type: 'checkbox',
				id: 'auto_configure',
				label: 'Auto-Configure USP Legacy Panel to work as a surface in Companion',
				width: 3,
				default: true,
				isVisible: (configValues) => configValues.model == 'usp_legacy' && configValues.use_as_surface == true,
			},
			{
				type: 'dropdown',
				id: 'usp_legacy_device_id',
				label: 'Device ID to use Legacy Panel Setup',
				width: 3,
				default: '0',
				choices: [
					{ id: '0', label: 'Device #1' },
					{ id: '1', label: 'Device #2' },
					{ id: '2', label: 'Device #3' },
					{ id: '3', label: 'Device #4' },
					{ id: '4', label: 'Device #5' },
					{ id: '5', label: 'Device #6' },
					{ id: '6', label: 'Device #7' },
					{ id: '7', label: 'Device #8' },
					{ id: '8', label: 'Device #9' },
					{ id: '9', label: 'Device #10' },
					{ id: '10', label: 'Device #11' },
					{ id: '11', label: 'Device #12' },
					{ id: '12', label: 'Device #13' },
					{ id: '13', label: 'Device #14' },
					{ id: '14', label: 'Device #15' },
					{ id: '15', label: 'Device #16' },
					{ id: '16', label: 'Device #17' },
					{ id: '17', label: 'Device #18' },
					{ id: '18', label: 'Device #19' },
					{ id: '19', label: 'Device #20' },
				],
				isVisible: (configValues) => configValues.model == 'usp_legacy' && configValues.use_as_surface == true && configValues.auto_configure == true,
			},
			{
				type: 'textinput',
				id: 'port_usp_legacy',
				label: 'Port as configured on Panel to send data back to Companion',
				width: 3,
				default: '',
				regex: Regex.Port,
				isVisible: (configValues) => configValues.model == 'usp_legacy' && configValues.auto_configure == false,
			},
			{
				type: 'static-text',
				id: 'info4',
				width: 12,
				label: 'Setting the USP Port',
				value: 'This Port must be unique for each panel and Companion module instance. The commands are sent over UDP, so make sure the panel and Companion are able to communicate over the same subnet.',
				isVisible: (configValues) => configValues.model == 'usp_legacy' && configValues.auto_configure == false,
			},
			{
				type: 'checkbox',
				id: 'already_configured',
				label: 'Already Auto-Configured',
				width: 12,
				default: false,
				isVisible: (configValues) => false,
			},
			{
				type: 'dropdown',
				id: 'font_size',
				label: 'Preferred Font Size to use on Buttons',
				width: 12,
				default: 'auto',
				choices: [
					{ id: 'auto', label: 'Auto Scale' },
					{ id: '0', label: 'Small' },
					{ id: '1', label: 'Medium' },
					{ id: '2', label: 'Large' },
				],
				isVisible: (configValues) => configValues.use_as_surface == true,
			},
			{
				type: 'static-text',
				id: 'info5',
				width: 12,
				label: '',
				value: '<hr />',
				isVisible: (configValues) => configValues.use_as_surface == false,
			},
			{
				type: 'checkbox',
				id: 'polling',
				label: 'Enable Polling',
				width: 6,
				default: false,
				isVisible: (configValues) => configValues.use_as_surface == false && configValues.model == 'usp3',
			},
			{
				type: 'number',
				id: 'poll_interval',
				label: 'Polling Interval (ms)',
				min: 50,
				max: 30000,
				default: 1000,
				width: 6,
				isVisible: (configValues) => configValues.polling == true,
			},
			{
				type: 'static-text',
				id: 'info6',
				width: 12,
				label: '',
				value: '<hr />',
			},
			{
				type: 'checkbox',
				id: 'verbose',
				label: 'Enable Verbose Logging',
				width: 12,
			}
		]
	}
}